{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","person","id","key","name","CardList","console","log","names","map","SearchBox","handler","type","onChange","App","handleSearch","e","setState","searchField","target","value","state","filteredNames","this","filter","toLowerCase","includes","style","fontFamily","fontSize","fetch","then","response","json","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,6OCG9BC,G,iBAAO,SAACC,GACnB,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAI,MACJC,IAAG,+BAA0BH,EAAMI,OAAOC,GAAvC,gBAEL,wBAAIC,IAAKN,EAAMI,OAAOC,IAAtB,IAA4BL,EAAMI,OAAOG,SCNlCC,G,MAAW,SAACR,GAIvB,OAFAS,QAAQC,IAAIV,GAGV,yBAAKC,UAAU,aACZD,EAAMW,MAAMC,KAAI,SAACR,GAAD,OACf,kBAAC,EAAD,CAAME,IAAKF,EAAOC,GAAID,OAAQA,UCRzBS,G,MAAY,SAAC,GAAc,IAAbC,EAAY,EAAZA,QACvB,OAAO,2BAAOb,UAAU,SAASc,KAAK,SAASC,SAAWF,MC4E/CG,M,kDAzEb,aAAe,IAAD,8BACZ,gBAwBFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,YAAcF,EAAEG,OAAOC,SAzBzB,EAAKC,MAAQ,CACXb,MAAO,CACL,CACEJ,KAAM,MACNF,GAAI,MAEN,CACEE,KAAM,MACNF,GAAI,MAEN,CACEE,KAAM,MACNF,GAAI,OAGRgB,YAAc,IAjBJ,E,qDAgCJ,IAAD,OAEDI,EAAgBC,KAAKF,MAAMb,MAAMgB,QAAO,SAAAvB,GAAM,OAAIA,EAAOG,KAAKqB,cAAcC,SAAS,EAAKL,MAAMH,gBACtG,OACE,yBAAKpB,UAAU,OACb,wBAAI6B,MAAQ,CAACC,WAAa,iBAAkBC,SAAW,SAAvD,mBACA,kBAAC,EAAD,CAAWlB,QAAYY,KAAKR,eAC5B,kBAAC,EAAD,CAAUP,MAAOc,GAAjB,Q,0CAMc,IAAD,OACjBQ,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAE,GAAI,OAAI,EAAKhB,SAAS,CAAET,MAAQyB,W,GAjDxBC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.04dd799f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./card.style.css\";\r\n\r\nexport const Card = (props) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        alt=\"cat\"\r\n        src={`https://robohash.org/${props.person.id}?set=set5&`}\r\n      />\r\n      <h1 key={props.person.id}> {props.person.name}</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = (props) => {\r\n  \r\n  console.log(props);\r\n\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.names.map((person) => (\r\n        <Card key={person.id} person={person} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './search-box.style.css'\r\n\r\nexport const SearchBox = ({handler}) =>{\r\n    return <input className=\"search\" type=\"search\" onChange={ handler }/>\r\n}","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {CardList} from './components/card-list/card-list.component'\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      names: [\n        {\n          name: \"Sam\",\n          id: \"A1\"\n        },\n        {\n          name: \"Kim\",\n          id: \"A2\"\n        },\n        {\n          name: \"Tom\",\n          id: \"A3\"\n        },\n      ],\n      searchField : \"\"\n    };\n  }\n\n  /**\n   * Arrow function is recommended as this component instance gets bind to the function automatically\n   * @param {*} e \n   */\n  handleSearch = (e) =>{\n    this.setState({\n      searchField : e.target.value\n    })\n  }\n\n\n  render() {\n\n    const filteredNames = this.state.names.filter(person => person.name.toLowerCase().includes(this.state.searchField))\n    return (\n      <div className=\"App\">\n        <h1 style= {{fontFamily : 'Dancing script', fontSize : '72px'}}>Persons Rolodex</h1>\n        <SearchBox handler = { this.handleSearch}/>\n        <CardList names={filteredNames}> </CardList>\n        \n      </div>\n    );\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then( response => response.json())\n    .then(json => this.setState({ names : json } ))\n  }\n}\n\nfunction App2() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload 1.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}